<?php

namespace Helios\Test;

use     Helios\Helios,
        Helios\HQL;

/**
 * Test class for Helios_HQL.
 * Generated by PHPUnit on 2010-02-15 at 21:58:49.
 */
class HQLTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Helios_HQL
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new HQL;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     *
     */
    public function testFrom()
    {
        $field = Helios::TYPE_FIELD_NAME;

        $this->object->from( 'Blazing, Arrow, NIA' );
        $this->assertEquals( "($field:Blazing OR $field:Arrow OR $field:NIA)", $this->object->build() );

        $this->object->from( "Blazing,Arrow,NIA" );
        $this->assertEquals( "($field:Blazing OR $field:Arrow OR $field:NIA)", $this->object->build() );

        $this->object->from( "Blazing, Arrow, " );
        $this->assertEquals( "($field:Blazing OR $field:Arrow)", $this->object->build( ) );

        $this->object->from( " Blazing,Arrow, " );
        $this->assertEquals( "($field:Blazing OR $field:Arrow)", $this->object->build( ) );
    }

    /**
     *
     */
    public function testAddFrom()
    {
        $field = Helios::TYPE_FIELD_NAME;

        $this->object->from( 'Blazing, Arrow' );

        $this->object->addFrom( 'NIA, Craft' );

        $this->assertEquals( "($field:Blazing OR $field:Arrow OR $field:NIA OR $field:Craft)", $this->object->build( ) );
    }

    /**
     *
     */
    public function testOrder()
    {
        $this->object->orderBy( 'foo desc' );
        $this->assertEquals( array( 'sort' => 'foo desc' ), $this->object->params( ) );

        $this->object->orderBy( 'foo desc, bar asc' );
        $this->assertEquals( array( 'sort' => 'foo desc,bar asc' ), $this->object->params( ) );
    }

    /**
     *
     */
    public function testAddOrder()
    {
        $this->object->orderBy( 'foo desc' );
        $this->assertEquals( array( 'sort' => 'foo desc' ), $this->object->params( ) );

        $this->object->addOrderBy( 'bar asc, foobar asc' );
        $this->assertEquals( array( 'sort' => 'foo desc,bar asc,foobar asc' ), $this->object->params( ) );
    }

    /**
     *
     */
    public function testWhere()
    {
        $this->object->where( 'foo = ?', 'value' );
        $this->assertEquals( '(foo:"value")', $this->object->build( ) );

        $this->object->where( 'foo = ? AND bar = ?', array( 1, 2 ) );
        $this->assertEquals( '(foo:"1" AND bar:"2")', $this->object->build( ) );

        $this->object->where( 'foo = ? OR bar = ?', array( 1, 2 ) );
        $this->assertEquals( '(foo:"1" OR bar:"2")', $this->object->build( ) );

        $this->object->where( 'bar != ?', array( 1 ) );
        $this->assertEquals( '((*:* -bar:"1"))', $this->object->build( ) );

        $this->object->where( 'foo = ?', 'value1' );
        $this->object->orWhere( 'bar = ?', 'value2' );
        $this->assertEquals( '(foo:"value1") OR (bar:"value2")', $this->object->build( ) );

        $this->object->where( 'foo = ?', 'value1' );
        $this->object->andWhere( 'bar = ?', 'value2' );
        $this->assertEquals( '(foo:"value1") AND (bar:"value2")', $this->object->build( ) );

    }

    /**
     * Test between Filter query
     */
    public function testBetween()
    {

        $this->object->between( 'foo BETWEEN ? AND ?', array( 10, 20 ) );
        $param = $this->object->params();
        $this->assertEquals( array( '(foo:[10 TO 20])' ),  $param['fq'] );

        $this->object->between( 'foo NOT BETWEEN ? AND ?', array( 10, 20 ) );
        $param = $this->object->params();
        $this->assertEquals( array( '((*:* -foo:[10 TO 20]))' ), $param['fq']);

        // and
        $this->object->between( 'foo BETWEEN ? AND ?', array( 10, 20 ) );
        $this->object->andBetween( 'boo BETWEEN ? AND ?', array( 30, 40 ) );
        $param = $this->object->params();
        $this->assertEquals( array( '(foo:[10 TO 20])', '(boo:[30 TO 40])' ), $param['fq']);

        $this->markTestIncomplete( 'OR function has been deprecated' );
        //or
        $this->object->between( 'foo BETWEEN ? AND ?', array( 10, 20 ) );
        $this->object->orBetween( 'boo NOT BETWEEN ? AND ?', array( 30, 40 ) );
        $param = $this->object->params();
        $this->assertEquals( '(foo:[10 TO 20]) OR ((*:* -boo:[30 TO 40]))', $param['fq']);
    }

    /**
     *
     */
    public function testAndWhere()
    {
        $this->object->where( 'foo = ?', 'value1' );
        $this->object->andWhere( 'bar = ?', 'value2' );
        $this->assertEquals( '(foo:"value1") AND (bar:"value2")', $this->object->build( ) );
    }

    /**
     *
     */
    public function testOrWhere()
    {
        $this->object->where( 'foo = ?', 'value1' );
        $this->object->orWhere( 'bar = ?', 'value2' );
        $this->assertEquals( '(foo:"value1") OR (bar:"value2")', $this->object->build( ) );
    }

    /**
     * test params
     */
    public function testParams()
    {
        $params = $this->object->params();
        $this->assertEquals( 0, count( $params ), 'No facets added' );

        // add facet Field to check params return
        $this->object->addFacetField( 'tags' );
        $params = $this->object->params();
        $this->assertNotEquals( 0, count( $params ) );
        $this->assertEquals( array( 'tags' ), $params[ 'facet.field' ] );

        // validate defaults
        $this->assertEquals( 'true', $params[ 'facet' ] );
        $this->assertEquals( '100', $params[ 'facet.limit' ] );
        $this->assertEquals( '0', $params[ 'facet.offset' ] );
        $this->assertEquals( '1', $params[ 'facet.mincount' ] );
        $this->assertEquals( 'true', $params[ 'facet.missing' ] );
        $this->assertEquals( '', $params[ 'facet.prefix' ] );
    }

    /**
     * test adding new facet
     */
    public function testAddFacet()
    {
        $params = $this->object->params();
        $this->assertFalse(array_key_exists( 'facet.test', $params  ) );

        $this->object->addFacet( 'facet.test', 'true' );
        $params = $this->object->params();
        $this->assertTrue(array_key_exists( 'facet.test', $params  ) );
        $this->assertEquals( 'true', $params[ 'facet.test' ] );

        // should override existing once
        $this->object->addFacet( 'facet.test', 'false' );
        $params = $this->object->params();
        $this->assertTrue(array_key_exists( 'facet.test', $params  ) );
        $this->assertEquals( 'false', $params[ 'facet.test' ] );
    }

    /**
     * Test get facets
     */
    public function testGeFacets()
    {
        $this->object->addFacet( 'facet.test', 'get-test' );
        $facets = $this->object->getFacets();
        $this->assertEquals( true, is_array( $facets ) );
        $this->assertEquals( 1, count( $facets ) );

        // tets multiple facets
        $this->object->addFacet( 'facet.multiple', 'test' );
        $this->object->addFacet( 'facet.range', 'fieldName' );
        $facets = $this->object->getFacets();
        $this->assertEquals( 3, count( $facets ) );
    }

    /**
     * Test addng faet Field
     */
    public function testAddGetFacetField()
    {
        $fields = $this->object->getFacetFields();
        $this->assertEquals( 0, count( $fields ) );

        $this->object->addFacetField( 'name' );
        $this->object->addFacetField( 'type' );
        $this->object->addFacetField( 'tags' );

        $fields = $this->object->getFacetFields();
        $this->assertEquals( 3, count( $fields ) );
    }

    /**
     * test adding a Range facet
     */
    public function testAddFacetRange()
    {
        $data = array(
            'field'     => 'occurrence',
            'start'     => '2011-11-10T15:30:00Z',
            'end'       => '2011-11-17T15:30:00Z',
            'gap'       => '+1DAY',
        );

        $this->object->addFacetRange( $data['field'], $data['start'], $data['end'], $data['gap'] );

        $facets = $this->object->getFacets();
        $this->assertEquals( array( $data['field'] ), $facets[ 'facet.range' ] );
        $this->assertEquals( $data['start'], $facets[ 'f.'.$data['field'].'.facet.range.start' ] );
        $this->assertEquals( $data['end'], $facets[ 'f.'.$data['field'].'.facet.range.end' ] );
        $this->assertEquals( $data['gap'], $facets[ 'f.'.$data['field'].'.facet.range.gap' ] );

        // add Multiple Ranges
        $range = array(
            'field'     => 'price',
            'start'     => '50',
            'end'       => '500',
            'gap'       => '+10',
        );

        $this->object->addFacetRange( $range['field'], $range['start'], $range['end'], $range['gap'] );
        $facets = $this->object->getFacets();
        $this->assertEquals( array( $data['field'], $range['field'] ), $facets[ 'facet.range' ] );

        $this->assertEquals( $range['start'], $facets[ 'f.'.$range['field'].'.facet.range.start' ] );
        $this->assertEquals( $range['end'], $facets[ 'f.'.$range['field'].'.facet.range.end' ] );
        $this->assertEquals( $range['gap'], $facets[ 'f.'.$range['field'].'.facet.range.gap' ] );

    }

    /**
     *
     */
    public function testEscape()
    {
        // + - && || ! ( ) { } [ ] ^ " ~ * ? : \

        $this->assertEquals( '\+', HQL::escape( '+' ) );
        $this->assertEquals( '\-', HQL::escape( '-' ) );
        $this->assertEquals( '\&&', HQL::escape( '&&' ) );
        $this->assertEquals( '\||', HQL::escape( '||' ) );
        $this->assertEquals( '\!', HQL::escape( '!' ) );
        $this->assertEquals( '\(', HQL::escape( '(' ) );
        $this->assertEquals( '\)', HQL::escape( ')' ) );
        $this->assertEquals( '\{', HQL::escape( '{' ) );
        $this->assertEquals( '\}', HQL::escape( '}' ) );
        $this->assertEquals( '\[', HQL::escape( '[' ) );
        $this->assertEquals( '\]', HQL::escape( ']' ) );
        $this->assertEquals( '\^', HQL::escape( '^' ) );
        $this->assertEquals( '\"', HQL::escape( '"' ) );
        $this->assertEquals( '\~', HQL::escape( '~' ) );
        $this->assertEquals( '\*', HQL::escape( '*' ) );
        $this->assertEquals( '\?', HQL::escape( '?' ) );
        $this->assertEquals( '\:', HQL::escape( ':' ) );
        $this->assertEquals( '\\\\', HQL::escape( '\\' ) );
    }

    /**
     *
     */
    public function testPaginationSetpage()
    {
        // SetCurrentPage only calculate Offset and getCurrentPage calculated from offset/limit
        $this->object->setMaxResults( 10 );
        $this->object->setCurrentPage( 2 );

        $this->assertEquals( 2, $this->object->getCurrentPage() );
        $this->assertEquals( 10, $this->object->getMaxResults() );
        $this->assertEquals( 10, $this->object->getFirstResult() );

        // change Page by setting offset
        $this->object->setFirstResult( 30 ); // == Page 4
        $this->assertEquals( 4, $this->object->getCurrentPage() );
    }

    /**
     *
     */
    public function testGroupBy()
    {
        $this->object->groupBy( 'testFieldName' );
        $params = $this->object->params();
        $this->assertEquals( true, \array_key_exists( 'group', $params ) );
        $this->assertEquals( true, \array_key_exists( 'group.field', $params ) );
        $this->assertEquals( true, \array_key_exists( 'group.ngroups', $params ) );
        $this->assertEquals( true, \array_key_exists( 'group.limit', $params ) );
        $this->assertEquals( true, \array_key_exists( 'group.offset', $params ) );
        $this->assertEquals( false, \array_key_exists( 'group.sort', $params ) );
        $this->assertEquals( true, $params['group'] );
        $this->assertEquals( true, $params['group.ngroups'] );
        $this->assertEquals( 'testFieldName', $params['group.field'] );

        $this->object->groupBy( 'newField', 10, 0, 'name' );
        $params = $this->object->params();
        $this->assertEquals( true, \array_key_exists( 'group', $params ) );
        $this->assertEquals( true, \array_key_exists( 'group.sort', $params ) );
        $this->assertEquals( true, $params['group'] );
        $this->assertEquals( 'newField', $params['group.field'] );
        $this->assertEquals( 'name', $params['group.sort'] );
        $this->assertEquals( 10, $params['group.limit'] );
        $this->assertEquals( 0, $params['group.offset'] );

    }

    /**
     *
     */
    public function testGroupQuery()
    {
        $this->object->groupWhere( 'name = ?', "solr" );
        $params = $this->object->params();
        $this->assertEquals( false, \array_key_exists( 'group', $params ) );
        $this->assertEquals( false, \array_key_exists( 'group.query', $params ), 'Unless group by specified, group should not be implemented' );

        $this->object->groupBy( 'postcode' );
        $params = $this->object->params();
        $this->assertEquals( true, \array_key_exists( 'group', $params ) );
        $this->assertEquals( true, \array_key_exists( 'group.query', $params ) );
        $this->assertEquals( '(name:"solr")', $params['group.query'] );

        $this->object->andGroupWhere( 'version = ?', "3.3" );
        $params = $this->object->params();
        $this->assertEquals( '(name:"solr") AND (version:"3.3")', $params['group.query'] );

        $this->object->orGroupWhere( 'version = ?', "4.0" );
        $params = $this->object->params();
        $this->assertEquals( '(name:"solr") AND (version:"3.3") OR (version:"4.0")', $params['group.query'] );
    }

    /**
     *
     */
    public function testAndGroupWhere()
    {
        $this->object->groupBy( 'postcode' );
        $this->object->andGroupWhere( 'name = ? AND version = ?', array( "solr", '3.3' ) );
        $params = $this->object->params();
        $this->assertEquals( '(name:"solr" AND version:"3.3")', $params['group.query'] );

        $this->object->andGroupWhere( 'release = ?','687' );
        $params = $this->object->params();
        $this->assertEquals( '(name:"solr" AND version:"3.3") AND (release:"687")', $params['group.query'] );
    }

    /**
     *
     */
    public function testOrGroupWhere()
    {
        $this->object->groupBy( 'postcode' );
        $this->object->orGroupWhere( 'name = ? AND version = ?', array( "solr", '3.3' ) );
        $params = $this->object->params();
        $this->assertEquals( '(name:"solr" AND version:"3.3")', $params['group.query'] );

        $this->object->orGroupWhere( 'version = ?','4.0' );
        $params = $this->object->params();
        $this->assertEquals( '(name:"solr" AND version:"3.3") OR (version:"4.0")', $params['group.query'] );
    }

    public function testComplexWhere()
    {
        $terms = array( "a", "b", array( "c", "d" ), "e" );

        $this->object->complexWhere( 'field', $terms );
        $this->assertEquals( '((field:"a" AND field:"b" AND (field:"c" OR field:"d") AND field:"e"))', $this->object->build() );

        $this->object->complexWhere( 'field', $terms, false );
        $this->assertEquals( '((field:"a" OR field:"b" OR (field:"c" AND field:"d") OR field:"e"))', $this->object->build() );


        $hql = new Hql();
        $hql->complexWhere( 'field', array(), false );
        $this->assertEquals( '', $hql->build() );
    }

    public function testOrComplexWhere()
    {
        $terms = array( "a", "b", array( "c", "d" ), "e" );

        $this->object->where( 'field2 = ?', 'test' );
        $this->object->orComplexWhere( 'field', $terms );
        $this->assertEquals( '(field2:"test") OR ((field:"a" AND field:"b" AND (field:"c" OR field:"d") AND field:"e"))', $this->object->build() );

        $this->object->where( 'field2 = ?', 'test' );
        $this->object->orComplexWhere( 'field', $terms, false );
        $this->assertEquals( '(field2:"test") OR ((field:"a" OR field:"b" OR (field:"c" AND field:"d") OR field:"e"))', $this->object->build() );

        $this->object->where( 'field2 = ?', 'test' );
        $this->object->orComplexWhere( 'field', array() );
        $this->assertEquals( '(field2:"test")', $this->object->build() );
    }

    public function testAndComplexWhere()
    {
        $terms = array( "a", "b", array( "c", "d" ), "e" );

        $this->object->where( 'field2 = ?', 'test' );
        $this->object->andComplexWhere( 'field', $terms );
        $this->assertEquals( '(field2:"test") AND ((field:"a" AND field:"b" AND (field:"c" OR field:"d") AND field:"e"))', $this->object->build() );

        $this->object->where( 'field2 = ?', 'test' );
        $this->object->andComplexWhere( 'field', $terms, false );
        $this->assertEquals( '(field2:"test") AND ((field:"a" OR field:"b" OR (field:"c" AND field:"d") OR field:"e"))', $this->object->build() );

        $this->object->where( 'field2 = ?', 'test' );
        $this->object->andComplexWhere( 'field', array() );
        $this->assertEquals( '(field2:"test")', $this->object->build() );
    }
}