<?php

namespace Helios\Test;

use Helios\Request;


/**
 * Test class for Helios_Request.
 * Generated by PHPUnit on 2010-02-10 at 13:33:22.
 */
class RequestTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Helios_Request
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Request;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testExecute().
     */
    public function testExecute()
    {

    }

    /**
     *
     */
    public function testGetQuery()
    {
        $query = 'test:query';

        $this->object->setQuery( $query );

        $this->assertEquals( $query, $this->object->getQuery( ) );
    }

    /**
     *
     */
    public function testSetValidQuery()
    {
        $query = 'test:query';

        $this->object->setQuery( $query );

        $this->assertEquals( $query, $this->object->getQuery( ) );
    }

    /**
     *
     */
    public function testSetInvalidQuery()
    {
        $this->setExpectedException( 'Exception' );
        $this->object->setQuery( $query );
    }

    /**
     *
     */
    public function testPagination()
    {
        $this->object->setOffset( 5 );
        $this->assertEquals( 5, $this->object->getOffset() );

        $this->object->setlimit( 20 );
        $this->assertEquals( 20, $this->object->getLimit() );

        // Set page
        $this->object->setCurrentPage( 2 );
        $this->assertEquals( 2, $this->object->getCurrentPage() );
    }

    /**
     *
     */
    public function testPaginationSetpage()
    {
        // SetCurrentPage only calculate Offset and getCurrentPage calculated from offset/limit
        $this->object->setlimit( 10 );
        $this->object->setCurrentPage( 2 );

        $this->assertEquals( 2, $this->object->getCurrentPage() );
        $this->assertEquals( 10, $this->object->getLimit() );
        $this->assertEquals( 10, $this->object->getOffset() );

        // change Page by setting offset
        $this->object->setOffset( 30 ); // == Page 4
        $this->assertEquals( 4, $this->object->getCurrentPage() );
    }
}
